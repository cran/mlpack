// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/mlpack.h"
#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// adaboost_call
void adaboost_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_adaboost_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    adaboost_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamAdaBoostModelPtr
SEXP GetParamAdaBoostModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamAdaBoostModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamAdaBoostModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamAdaBoostModelPtr
void SetParamAdaBoostModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamAdaBoostModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamAdaBoostModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeAdaBoostModelPtr
Rcpp::RawVector SerializeAdaBoostModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeAdaBoostModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeAdaBoostModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeAdaBoostModelPtr
SEXP DeserializeAdaBoostModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeAdaBoostModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeAdaBoostModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// approx_kfn_call
void approx_kfn_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_approx_kfn_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    approx_kfn_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamApproxKFNModelPtr
SEXP GetParamApproxKFNModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamApproxKFNModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamApproxKFNModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamApproxKFNModelPtr
void SetParamApproxKFNModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamApproxKFNModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamApproxKFNModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeApproxKFNModelPtr
Rcpp::RawVector SerializeApproxKFNModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeApproxKFNModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeApproxKFNModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeApproxKFNModelPtr
SEXP DeserializeApproxKFNModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeApproxKFNModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeApproxKFNModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// bayesian_linear_regression_call
void bayesian_linear_regression_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_bayesian_linear_regression_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    bayesian_linear_regression_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamBayesianLinearRegressionPtr
SEXP GetParamBayesianLinearRegressionPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamBayesianLinearRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamBayesianLinearRegressionPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamBayesianLinearRegressionPtr
void SetParamBayesianLinearRegressionPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamBayesianLinearRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamBayesianLinearRegressionPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeBayesianLinearRegressionPtr
Rcpp::RawVector SerializeBayesianLinearRegressionPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeBayesianLinearRegressionPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeBayesianLinearRegressionPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeBayesianLinearRegressionPtr
SEXP DeserializeBayesianLinearRegressionPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeBayesianLinearRegressionPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeBayesianLinearRegressionPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// cf_call
void cf_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_cf_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    cf_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamCFModelPtr
SEXP GetParamCFModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamCFModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamCFModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamCFModelPtr
void SetParamCFModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamCFModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamCFModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeCFModelPtr
Rcpp::RawVector SerializeCFModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeCFModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeCFModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeCFModelPtr
SEXP DeserializeCFModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeCFModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeCFModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// dbscan_call
void dbscan_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_dbscan_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    dbscan_call(params, timers);
    return R_NilValue;
END_RCPP
}
// decision_tree_call
void decision_tree_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_decision_tree_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    decision_tree_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamDecisionTreeModelPtr
SEXP GetParamDecisionTreeModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamDecisionTreeModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamDecisionTreeModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamDecisionTreeModelPtr
void SetParamDecisionTreeModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamDecisionTreeModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamDecisionTreeModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeDecisionTreeModelPtr
Rcpp::RawVector SerializeDecisionTreeModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeDecisionTreeModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeDecisionTreeModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeDecisionTreeModelPtr
SEXP DeserializeDecisionTreeModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeDecisionTreeModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeDecisionTreeModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// det_call
void det_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_det_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    det_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamDTreePtr
SEXP GetParamDTreePtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamDTreePtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamDTreePtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamDTreePtr
void SetParamDTreePtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamDTreePtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamDTreePtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeDTreePtr
Rcpp::RawVector SerializeDTreePtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeDTreePtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeDTreePtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeDTreePtr
SEXP DeserializeDTreePtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeDTreePtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeDTreePtr(str));
    return rcpp_result_gen;
END_RCPP
}
// emst_call
void emst_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_emst_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    emst_call(params, timers);
    return R_NilValue;
END_RCPP
}
// fastmks_call
void fastmks_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_fastmks_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    fastmks_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamFastMKSModelPtr
SEXP GetParamFastMKSModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamFastMKSModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamFastMKSModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamFastMKSModelPtr
void SetParamFastMKSModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamFastMKSModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamFastMKSModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeFastMKSModelPtr
Rcpp::RawVector SerializeFastMKSModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeFastMKSModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeFastMKSModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeFastMKSModelPtr
SEXP DeserializeFastMKSModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeFastMKSModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeFastMKSModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// gmm_generate_call
void gmm_generate_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_gmm_generate_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    gmm_generate_call(params, timers);
    return R_NilValue;
END_RCPP
}
// gmm_probability_call
void gmm_probability_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_gmm_probability_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    gmm_probability_call(params, timers);
    return R_NilValue;
END_RCPP
}
// gmm_train_call
void gmm_train_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_gmm_train_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    gmm_train_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamGMMPtr
SEXP GetParamGMMPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamGMMPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamGMMPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamGMMPtr
void SetParamGMMPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamGMMPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamGMMPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeGMMPtr
Rcpp::RawVector SerializeGMMPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeGMMPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeGMMPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeGMMPtr
SEXP DeserializeGMMPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeGMMPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeGMMPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// hmm_generate_call
void hmm_generate_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_hmm_generate_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    hmm_generate_call(params, timers);
    return R_NilValue;
END_RCPP
}
// hmm_loglik_call
void hmm_loglik_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_hmm_loglik_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    hmm_loglik_call(params, timers);
    return R_NilValue;
END_RCPP
}
// hmm_train_call
void hmm_train_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_hmm_train_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    hmm_train_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamHMMModelPtr
SEXP GetParamHMMModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamHMMModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamHMMModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamHMMModelPtr
void SetParamHMMModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamHMMModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamHMMModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeHMMModelPtr
Rcpp::RawVector SerializeHMMModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeHMMModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeHMMModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeHMMModelPtr
SEXP DeserializeHMMModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeHMMModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeHMMModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// hmm_viterbi_call
void hmm_viterbi_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_hmm_viterbi_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    hmm_viterbi_call(params, timers);
    return R_NilValue;
END_RCPP
}
// hoeffding_tree_call
void hoeffding_tree_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_hoeffding_tree_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    hoeffding_tree_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamHoeffdingTreeModelPtr
SEXP GetParamHoeffdingTreeModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamHoeffdingTreeModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamHoeffdingTreeModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamHoeffdingTreeModelPtr
void SetParamHoeffdingTreeModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamHoeffdingTreeModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamHoeffdingTreeModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeHoeffdingTreeModelPtr
Rcpp::RawVector SerializeHoeffdingTreeModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeHoeffdingTreeModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeHoeffdingTreeModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeHoeffdingTreeModelPtr
SEXP DeserializeHoeffdingTreeModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeHoeffdingTreeModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeHoeffdingTreeModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// kde_call
void kde_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_kde_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    kde_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamKDEModelPtr
SEXP GetParamKDEModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamKDEModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamKDEModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamKDEModelPtr
void SetParamKDEModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamKDEModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamKDEModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeKDEModelPtr
Rcpp::RawVector SerializeKDEModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeKDEModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeKDEModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeKDEModelPtr
SEXP DeserializeKDEModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeKDEModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeKDEModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// kernel_pca_call
void kernel_pca_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_kernel_pca_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    kernel_pca_call(params, timers);
    return R_NilValue;
END_RCPP
}
// kfn_call
void kfn_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_kfn_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    kfn_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamKFNModelPtr
SEXP GetParamKFNModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamKFNModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamKFNModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamKFNModelPtr
void SetParamKFNModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamKFNModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamKFNModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeKFNModelPtr
Rcpp::RawVector SerializeKFNModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeKFNModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeKFNModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeKFNModelPtr
SEXP DeserializeKFNModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeKFNModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeKFNModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// kmeans_call
void kmeans_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_kmeans_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    kmeans_call(params, timers);
    return R_NilValue;
END_RCPP
}
// knn_call
void knn_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_knn_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    knn_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamKNNModelPtr
SEXP GetParamKNNModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamKNNModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamKNNModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamKNNModelPtr
void SetParamKNNModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamKNNModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamKNNModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeKNNModelPtr
Rcpp::RawVector SerializeKNNModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeKNNModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeKNNModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeKNNModelPtr
SEXP DeserializeKNNModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeKNNModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeKNNModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// krann_call
void krann_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_krann_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    krann_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamRAModelPtr
SEXP GetParamRAModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamRAModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamRAModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamRAModelPtr
void SetParamRAModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamRAModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamRAModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeRAModelPtr
Rcpp::RawVector SerializeRAModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeRAModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeRAModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeRAModelPtr
SEXP DeserializeRAModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeRAModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeRAModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// lars_call
void lars_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_lars_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    lars_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamLARSPtr
SEXP GetParamLARSPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamLARSPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamLARSPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamLARSPtr
void SetParamLARSPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamLARSPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamLARSPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLARSPtr
Rcpp::RawVector SerializeLARSPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeLARSPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLARSPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeLARSPtr
SEXP DeserializeLARSPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeLARSPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeLARSPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// linear_regression_call
void linear_regression_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_linear_regression_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    linear_regression_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamLinearRegressionPtr
SEXP GetParamLinearRegressionPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamLinearRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamLinearRegressionPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamLinearRegressionPtr
void SetParamLinearRegressionPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamLinearRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamLinearRegressionPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLinearRegressionPtr
Rcpp::RawVector SerializeLinearRegressionPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeLinearRegressionPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLinearRegressionPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeLinearRegressionPtr
SEXP DeserializeLinearRegressionPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeLinearRegressionPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeLinearRegressionPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// linear_svm_call
void linear_svm_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_linear_svm_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    linear_svm_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamLinearSVMModelPtr
SEXP GetParamLinearSVMModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamLinearSVMModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamLinearSVMModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamLinearSVMModelPtr
void SetParamLinearSVMModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamLinearSVMModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamLinearSVMModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLinearSVMModelPtr
Rcpp::RawVector SerializeLinearSVMModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeLinearSVMModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLinearSVMModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeLinearSVMModelPtr
SEXP DeserializeLinearSVMModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeLinearSVMModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeLinearSVMModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// lmnn_call
void lmnn_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_lmnn_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    lmnn_call(params, timers);
    return R_NilValue;
END_RCPP
}
// local_coordinate_coding_call
void local_coordinate_coding_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_local_coordinate_coding_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    local_coordinate_coding_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamLocalCoordinateCodingPtr
SEXP GetParamLocalCoordinateCodingPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamLocalCoordinateCodingPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamLocalCoordinateCodingPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamLocalCoordinateCodingPtr
void SetParamLocalCoordinateCodingPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamLocalCoordinateCodingPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamLocalCoordinateCodingPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLocalCoordinateCodingPtr
Rcpp::RawVector SerializeLocalCoordinateCodingPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeLocalCoordinateCodingPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLocalCoordinateCodingPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeLocalCoordinateCodingPtr
SEXP DeserializeLocalCoordinateCodingPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeLocalCoordinateCodingPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeLocalCoordinateCodingPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// logistic_regression_call
void logistic_regression_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_logistic_regression_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    logistic_regression_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamLogisticRegressionPtr
SEXP GetParamLogisticRegressionPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamLogisticRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamLogisticRegressionPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamLogisticRegressionPtr
void SetParamLogisticRegressionPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamLogisticRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamLogisticRegressionPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLogisticRegressionPtr
Rcpp::RawVector SerializeLogisticRegressionPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeLogisticRegressionPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLogisticRegressionPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeLogisticRegressionPtr
SEXP DeserializeLogisticRegressionPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeLogisticRegressionPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeLogisticRegressionPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// lsh_call
void lsh_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_lsh_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    lsh_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamLSHSearchPtr
SEXP GetParamLSHSearchPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamLSHSearchPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamLSHSearchPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamLSHSearchPtr
void SetParamLSHSearchPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamLSHSearchPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamLSHSearchPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeLSHSearchPtr
Rcpp::RawVector SerializeLSHSearchPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeLSHSearchPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeLSHSearchPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeLSHSearchPtr
SEXP DeserializeLSHSearchPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeLSHSearchPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeLSHSearchPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// mean_shift_call
void mean_shift_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_mean_shift_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    mean_shift_call(params, timers);
    return R_NilValue;
END_RCPP
}
// nbc_call
void nbc_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_nbc_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    nbc_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamNBCModelPtr
SEXP GetParamNBCModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamNBCModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamNBCModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamNBCModelPtr
void SetParamNBCModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamNBCModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamNBCModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeNBCModelPtr
Rcpp::RawVector SerializeNBCModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeNBCModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeNBCModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeNBCModelPtr
SEXP DeserializeNBCModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeNBCModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeNBCModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// nca_call
void nca_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_nca_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    nca_call(params, timers);
    return R_NilValue;
END_RCPP
}
// nmf_call
void nmf_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_nmf_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    nmf_call(params, timers);
    return R_NilValue;
END_RCPP
}
// pca_call
void pca_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_pca_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    pca_call(params, timers);
    return R_NilValue;
END_RCPP
}
// perceptron_call
void perceptron_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_perceptron_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    perceptron_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamPerceptronModelPtr
SEXP GetParamPerceptronModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamPerceptronModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamPerceptronModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamPerceptronModelPtr
void SetParamPerceptronModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamPerceptronModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamPerceptronModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializePerceptronModelPtr
Rcpp::RawVector SerializePerceptronModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializePerceptronModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializePerceptronModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializePerceptronModelPtr
SEXP DeserializePerceptronModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializePerceptronModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializePerceptronModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// preprocess_binarize_call
void preprocess_binarize_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_preprocess_binarize_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    preprocess_binarize_call(params, timers);
    return R_NilValue;
END_RCPP
}
// preprocess_describe_call
void preprocess_describe_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_preprocess_describe_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    preprocess_describe_call(params, timers);
    return R_NilValue;
END_RCPP
}
// preprocess_one_hot_encoding_call
void preprocess_one_hot_encoding_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_preprocess_one_hot_encoding_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    preprocess_one_hot_encoding_call(params, timers);
    return R_NilValue;
END_RCPP
}
// preprocess_scale_call
void preprocess_scale_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_preprocess_scale_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    preprocess_scale_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamScalingModelPtr
SEXP GetParamScalingModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamScalingModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamScalingModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamScalingModelPtr
void SetParamScalingModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamScalingModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamScalingModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeScalingModelPtr
Rcpp::RawVector SerializeScalingModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeScalingModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeScalingModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeScalingModelPtr
SEXP DeserializeScalingModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeScalingModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeScalingModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// preprocess_split_call
void preprocess_split_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_preprocess_split_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    preprocess_split_call(params, timers);
    return R_NilValue;
END_RCPP
}
// CreateParams
SEXP CreateParams(const std::string& bindingName);
RcppExport SEXP _mlpack_CreateParams(SEXP bindingNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type bindingName(bindingNameSEXP);
    rcpp_result_gen = Rcpp::wrap(CreateParams(bindingName));
    return rcpp_result_gen;
END_RCPP
}
// CreateTimers
SEXP CreateTimers();
RcppExport SEXP _mlpack_CreateTimers() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(CreateTimers());
    return rcpp_result_gen;
END_RCPP
}
// SetParamInt
void SetParamInt(SEXP params, const std::string& paramName, int paramValue);
RcppExport SEXP _mlpack_SetParamInt(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< int >::type paramValue(paramValueSEXP);
    SetParamInt(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamDouble
void SetParamDouble(SEXP params, const std::string& paramName, double paramValue);
RcppExport SEXP _mlpack_SetParamDouble(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< double >::type paramValue(paramValueSEXP);
    SetParamDouble(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamString
void SetParamString(SEXP params, const std::string& paramName, std::string& paramValue);
RcppExport SEXP _mlpack_SetParamString(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< std::string& >::type paramValue(paramValueSEXP);
    SetParamString(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamBool
void SetParamBool(SEXP params, const std::string& paramName, bool paramValue);
RcppExport SEXP _mlpack_SetParamBool(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< bool >::type paramValue(paramValueSEXP);
    SetParamBool(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamVecString
void SetParamVecString(SEXP params, const std::string& paramName, const std::vector<std::string>& str);
RcppExport SEXP _mlpack_SetParamVecString(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type str(strSEXP);
    SetParamVecString(params, paramName, str);
    return R_NilValue;
END_RCPP
}
// SetParamVecInt
void SetParamVecInt(SEXP params, const std::string& paramName, const std::vector<int>& ints);
RcppExport SEXP _mlpack_SetParamVecInt(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP intsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type ints(intsSEXP);
    SetParamVecInt(params, paramName, ints);
    return R_NilValue;
END_RCPP
}
// SetParamMat
void SetParamMat(SEXP params, const std::string& paramName, const arma::mat& paramValue, bool transpose);
RcppExport SEXP _mlpack_SetParamMat(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type paramValue(paramValueSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    SetParamMat(params, paramName, paramValue, transpose);
    return R_NilValue;
END_RCPP
}
// SetParamUMat
void SetParamUMat(SEXP params, const std::string& paramName, const arma::Mat<size_t>& paramValue);
RcppExport SEXP _mlpack_SetParamUMat(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<size_t>& >::type paramValue(paramValueSEXP);
    SetParamUMat(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamRow
void SetParamRow(SEXP params, const std::string& paramName, const arma::rowvec& paramValue);
RcppExport SEXP _mlpack_SetParamRow(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type paramValue(paramValueSEXP);
    SetParamRow(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamURow
void SetParamURow(SEXP params, const std::string& paramName, const arma::Row<size_t>& paramValue);
RcppExport SEXP _mlpack_SetParamURow(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::Row<size_t>& >::type paramValue(paramValueSEXP);
    SetParamURow(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamCol
void SetParamCol(SEXP params, const std::string& paramName, const arma::vec& paramValue);
RcppExport SEXP _mlpack_SetParamCol(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type paramValue(paramValueSEXP);
    SetParamCol(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamUCol
void SetParamUCol(SEXP params, const std::string& paramName, const arma::Col<size_t>& paramValue);
RcppExport SEXP _mlpack_SetParamUCol(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const arma::Col<size_t>& >::type paramValue(paramValueSEXP);
    SetParamUCol(params, paramName, paramValue);
    return R_NilValue;
END_RCPP
}
// SetParamMatWithInfo
void SetParamMatWithInfo(SEXP params, const std::string& paramName, const LogicalVector& dimensions, const arma::mat& paramValue);
RcppExport SEXP _mlpack_SetParamMatWithInfo(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP dimensionsSEXP, SEXP paramValueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type paramValue(paramValueSEXP);
    SetParamMatWithInfo(params, paramName, dimensions, paramValue);
    return R_NilValue;
END_RCPP
}
// GetParamInt
int GetParamInt(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamInt(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamInt(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamDouble
double GetParamDouble(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamDouble(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamDouble(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamString
std::string& GetParamString(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamString(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamString(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamBool
bool GetParamBool(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamBool(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamBool(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamVecString
const std::vector<std::string>& GetParamVecString(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamVecString(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamVecString(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamVecInt
const std::vector<int>& GetParamVecInt(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamVecInt(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamVecInt(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamMat
const arma::mat& GetParamMat(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamMat(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamMat(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamUMat
const arma::Mat<size_t>& GetParamUMat(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamUMat(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamUMat(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamRow
const arma::vec GetParamRow(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamRow(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamRow(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamURow
const arma::Col<size_t> GetParamURow(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamURow(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamURow(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamCol
const arma::rowvec GetParamCol(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamCol(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamCol(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// GetParamUCol
const arma::Row<size_t> GetParamUCol(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_GetParamUCol(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamUCol(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// IO_GetParamMatWithInfo
List IO_GetParamMatWithInfo(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_IO_GetParamMatWithInfo(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    rcpp_result_gen = Rcpp::wrap(IO_GetParamMatWithInfo(params, paramName));
    return rcpp_result_gen;
END_RCPP
}
// ResetTimers
void ResetTimers();
RcppExport SEXP _mlpack_ResetTimers() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    ResetTimers();
    return R_NilValue;
END_RCPP
}
// SetPassed
void SetPassed(SEXP params, const std::string& paramName);
RcppExport SEXP _mlpack_SetPassed(SEXP paramsSEXP, SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    SetPassed(params, paramName);
    return R_NilValue;
END_RCPP
}
// radical_call
void radical_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_radical_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    radical_call(params, timers);
    return R_NilValue;
END_RCPP
}
// random_forest_call
void random_forest_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_random_forest_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    random_forest_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamRandomForestModelPtr
SEXP GetParamRandomForestModelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamRandomForestModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamRandomForestModelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamRandomForestModelPtr
void SetParamRandomForestModelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamRandomForestModelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamRandomForestModelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeRandomForestModelPtr
Rcpp::RawVector SerializeRandomForestModelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeRandomForestModelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeRandomForestModelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeRandomForestModelPtr
SEXP DeserializeRandomForestModelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeRandomForestModelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeRandomForestModelPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// softmax_regression_call
void softmax_regression_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_softmax_regression_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    softmax_regression_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamSoftmaxRegressionPtr
SEXP GetParamSoftmaxRegressionPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamSoftmaxRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamSoftmaxRegressionPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamSoftmaxRegressionPtr
void SetParamSoftmaxRegressionPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamSoftmaxRegressionPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamSoftmaxRegressionPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeSoftmaxRegressionPtr
Rcpp::RawVector SerializeSoftmaxRegressionPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeSoftmaxRegressionPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeSoftmaxRegressionPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeSoftmaxRegressionPtr
SEXP DeserializeSoftmaxRegressionPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeSoftmaxRegressionPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeSoftmaxRegressionPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// sparse_coding_call
void sparse_coding_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_sparse_coding_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    sparse_coding_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamSparseCodingPtr
SEXP GetParamSparseCodingPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamSparseCodingPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamSparseCodingPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamSparseCodingPtr
void SetParamSparseCodingPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamSparseCodingPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamSparseCodingPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeSparseCodingPtr
Rcpp::RawVector SerializeSparseCodingPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeSparseCodingPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeSparseCodingPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeSparseCodingPtr
SEXP DeserializeSparseCodingPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeSparseCodingPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeSparseCodingPtr(str));
    return rcpp_result_gen;
END_RCPP
}
// test_r_binding_call
void test_r_binding_call(SEXP params, SEXP timers);
RcppExport SEXP _mlpack_test_r_binding_call(SEXP paramsSEXP, SEXP timersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type timers(timersSEXP);
    test_r_binding_call(params, timers);
    return R_NilValue;
END_RCPP
}
// GetParamGaussianKernelPtr
SEXP GetParamGaussianKernelPtr(SEXP params, const std::string& paramName, SEXP inputModels);
RcppExport SEXP _mlpack_GetParamGaussianKernelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP inputModelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type inputModels(inputModelsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetParamGaussianKernelPtr(params, paramName, inputModels));
    return rcpp_result_gen;
END_RCPP
}
// SetParamGaussianKernelPtr
void SetParamGaussianKernelPtr(SEXP params, const std::string& paramName, SEXP ptr);
RcppExport SEXP _mlpack_SetParamGaussianKernelPtr(SEXP paramsSEXP, SEXP paramNameSEXP, SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    SetParamGaussianKernelPtr(params, paramName, ptr);
    return R_NilValue;
END_RCPP
}
// SerializeGaussianKernelPtr
Rcpp::RawVector SerializeGaussianKernelPtr(SEXP ptr);
RcppExport SEXP _mlpack_SerializeGaussianKernelPtr(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(SerializeGaussianKernelPtr(ptr));
    return rcpp_result_gen;
END_RCPP
}
// DeserializeGaussianKernelPtr
SEXP DeserializeGaussianKernelPtr(Rcpp::RawVector str);
RcppExport SEXP _mlpack_DeserializeGaussianKernelPtr(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(DeserializeGaussianKernelPtr(str));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlpack_adaboost_call", (DL_FUNC) &_mlpack_adaboost_call, 2},
    {"_mlpack_GetParamAdaBoostModelPtr", (DL_FUNC) &_mlpack_GetParamAdaBoostModelPtr, 3},
    {"_mlpack_SetParamAdaBoostModelPtr", (DL_FUNC) &_mlpack_SetParamAdaBoostModelPtr, 3},
    {"_mlpack_SerializeAdaBoostModelPtr", (DL_FUNC) &_mlpack_SerializeAdaBoostModelPtr, 1},
    {"_mlpack_DeserializeAdaBoostModelPtr", (DL_FUNC) &_mlpack_DeserializeAdaBoostModelPtr, 1},
    {"_mlpack_approx_kfn_call", (DL_FUNC) &_mlpack_approx_kfn_call, 2},
    {"_mlpack_GetParamApproxKFNModelPtr", (DL_FUNC) &_mlpack_GetParamApproxKFNModelPtr, 3},
    {"_mlpack_SetParamApproxKFNModelPtr", (DL_FUNC) &_mlpack_SetParamApproxKFNModelPtr, 3},
    {"_mlpack_SerializeApproxKFNModelPtr", (DL_FUNC) &_mlpack_SerializeApproxKFNModelPtr, 1},
    {"_mlpack_DeserializeApproxKFNModelPtr", (DL_FUNC) &_mlpack_DeserializeApproxKFNModelPtr, 1},
    {"_mlpack_bayesian_linear_regression_call", (DL_FUNC) &_mlpack_bayesian_linear_regression_call, 2},
    {"_mlpack_GetParamBayesianLinearRegressionPtr", (DL_FUNC) &_mlpack_GetParamBayesianLinearRegressionPtr, 3},
    {"_mlpack_SetParamBayesianLinearRegressionPtr", (DL_FUNC) &_mlpack_SetParamBayesianLinearRegressionPtr, 3},
    {"_mlpack_SerializeBayesianLinearRegressionPtr", (DL_FUNC) &_mlpack_SerializeBayesianLinearRegressionPtr, 1},
    {"_mlpack_DeserializeBayesianLinearRegressionPtr", (DL_FUNC) &_mlpack_DeserializeBayesianLinearRegressionPtr, 1},
    {"_mlpack_cf_call", (DL_FUNC) &_mlpack_cf_call, 2},
    {"_mlpack_GetParamCFModelPtr", (DL_FUNC) &_mlpack_GetParamCFModelPtr, 3},
    {"_mlpack_SetParamCFModelPtr", (DL_FUNC) &_mlpack_SetParamCFModelPtr, 3},
    {"_mlpack_SerializeCFModelPtr", (DL_FUNC) &_mlpack_SerializeCFModelPtr, 1},
    {"_mlpack_DeserializeCFModelPtr", (DL_FUNC) &_mlpack_DeserializeCFModelPtr, 1},
    {"_mlpack_dbscan_call", (DL_FUNC) &_mlpack_dbscan_call, 2},
    {"_mlpack_decision_tree_call", (DL_FUNC) &_mlpack_decision_tree_call, 2},
    {"_mlpack_GetParamDecisionTreeModelPtr", (DL_FUNC) &_mlpack_GetParamDecisionTreeModelPtr, 3},
    {"_mlpack_SetParamDecisionTreeModelPtr", (DL_FUNC) &_mlpack_SetParamDecisionTreeModelPtr, 3},
    {"_mlpack_SerializeDecisionTreeModelPtr", (DL_FUNC) &_mlpack_SerializeDecisionTreeModelPtr, 1},
    {"_mlpack_DeserializeDecisionTreeModelPtr", (DL_FUNC) &_mlpack_DeserializeDecisionTreeModelPtr, 1},
    {"_mlpack_det_call", (DL_FUNC) &_mlpack_det_call, 2},
    {"_mlpack_GetParamDTreePtr", (DL_FUNC) &_mlpack_GetParamDTreePtr, 3},
    {"_mlpack_SetParamDTreePtr", (DL_FUNC) &_mlpack_SetParamDTreePtr, 3},
    {"_mlpack_SerializeDTreePtr", (DL_FUNC) &_mlpack_SerializeDTreePtr, 1},
    {"_mlpack_DeserializeDTreePtr", (DL_FUNC) &_mlpack_DeserializeDTreePtr, 1},
    {"_mlpack_emst_call", (DL_FUNC) &_mlpack_emst_call, 2},
    {"_mlpack_fastmks_call", (DL_FUNC) &_mlpack_fastmks_call, 2},
    {"_mlpack_GetParamFastMKSModelPtr", (DL_FUNC) &_mlpack_GetParamFastMKSModelPtr, 3},
    {"_mlpack_SetParamFastMKSModelPtr", (DL_FUNC) &_mlpack_SetParamFastMKSModelPtr, 3},
    {"_mlpack_SerializeFastMKSModelPtr", (DL_FUNC) &_mlpack_SerializeFastMKSModelPtr, 1},
    {"_mlpack_DeserializeFastMKSModelPtr", (DL_FUNC) &_mlpack_DeserializeFastMKSModelPtr, 1},
    {"_mlpack_gmm_generate_call", (DL_FUNC) &_mlpack_gmm_generate_call, 2},
    {"_mlpack_gmm_probability_call", (DL_FUNC) &_mlpack_gmm_probability_call, 2},
    {"_mlpack_gmm_train_call", (DL_FUNC) &_mlpack_gmm_train_call, 2},
    {"_mlpack_GetParamGMMPtr", (DL_FUNC) &_mlpack_GetParamGMMPtr, 3},
    {"_mlpack_SetParamGMMPtr", (DL_FUNC) &_mlpack_SetParamGMMPtr, 3},
    {"_mlpack_SerializeGMMPtr", (DL_FUNC) &_mlpack_SerializeGMMPtr, 1},
    {"_mlpack_DeserializeGMMPtr", (DL_FUNC) &_mlpack_DeserializeGMMPtr, 1},
    {"_mlpack_hmm_generate_call", (DL_FUNC) &_mlpack_hmm_generate_call, 2},
    {"_mlpack_hmm_loglik_call", (DL_FUNC) &_mlpack_hmm_loglik_call, 2},
    {"_mlpack_hmm_train_call", (DL_FUNC) &_mlpack_hmm_train_call, 2},
    {"_mlpack_GetParamHMMModelPtr", (DL_FUNC) &_mlpack_GetParamHMMModelPtr, 3},
    {"_mlpack_SetParamHMMModelPtr", (DL_FUNC) &_mlpack_SetParamHMMModelPtr, 3},
    {"_mlpack_SerializeHMMModelPtr", (DL_FUNC) &_mlpack_SerializeHMMModelPtr, 1},
    {"_mlpack_DeserializeHMMModelPtr", (DL_FUNC) &_mlpack_DeserializeHMMModelPtr, 1},
    {"_mlpack_hmm_viterbi_call", (DL_FUNC) &_mlpack_hmm_viterbi_call, 2},
    {"_mlpack_hoeffding_tree_call", (DL_FUNC) &_mlpack_hoeffding_tree_call, 2},
    {"_mlpack_GetParamHoeffdingTreeModelPtr", (DL_FUNC) &_mlpack_GetParamHoeffdingTreeModelPtr, 3},
    {"_mlpack_SetParamHoeffdingTreeModelPtr", (DL_FUNC) &_mlpack_SetParamHoeffdingTreeModelPtr, 3},
    {"_mlpack_SerializeHoeffdingTreeModelPtr", (DL_FUNC) &_mlpack_SerializeHoeffdingTreeModelPtr, 1},
    {"_mlpack_DeserializeHoeffdingTreeModelPtr", (DL_FUNC) &_mlpack_DeserializeHoeffdingTreeModelPtr, 1},
    {"_mlpack_kde_call", (DL_FUNC) &_mlpack_kde_call, 2},
    {"_mlpack_GetParamKDEModelPtr", (DL_FUNC) &_mlpack_GetParamKDEModelPtr, 3},
    {"_mlpack_SetParamKDEModelPtr", (DL_FUNC) &_mlpack_SetParamKDEModelPtr, 3},
    {"_mlpack_SerializeKDEModelPtr", (DL_FUNC) &_mlpack_SerializeKDEModelPtr, 1},
    {"_mlpack_DeserializeKDEModelPtr", (DL_FUNC) &_mlpack_DeserializeKDEModelPtr, 1},
    {"_mlpack_kernel_pca_call", (DL_FUNC) &_mlpack_kernel_pca_call, 2},
    {"_mlpack_kfn_call", (DL_FUNC) &_mlpack_kfn_call, 2},
    {"_mlpack_GetParamKFNModelPtr", (DL_FUNC) &_mlpack_GetParamKFNModelPtr, 3},
    {"_mlpack_SetParamKFNModelPtr", (DL_FUNC) &_mlpack_SetParamKFNModelPtr, 3},
    {"_mlpack_SerializeKFNModelPtr", (DL_FUNC) &_mlpack_SerializeKFNModelPtr, 1},
    {"_mlpack_DeserializeKFNModelPtr", (DL_FUNC) &_mlpack_DeserializeKFNModelPtr, 1},
    {"_mlpack_kmeans_call", (DL_FUNC) &_mlpack_kmeans_call, 2},
    {"_mlpack_knn_call", (DL_FUNC) &_mlpack_knn_call, 2},
    {"_mlpack_GetParamKNNModelPtr", (DL_FUNC) &_mlpack_GetParamKNNModelPtr, 3},
    {"_mlpack_SetParamKNNModelPtr", (DL_FUNC) &_mlpack_SetParamKNNModelPtr, 3},
    {"_mlpack_SerializeKNNModelPtr", (DL_FUNC) &_mlpack_SerializeKNNModelPtr, 1},
    {"_mlpack_DeserializeKNNModelPtr", (DL_FUNC) &_mlpack_DeserializeKNNModelPtr, 1},
    {"_mlpack_krann_call", (DL_FUNC) &_mlpack_krann_call, 2},
    {"_mlpack_GetParamRAModelPtr", (DL_FUNC) &_mlpack_GetParamRAModelPtr, 3},
    {"_mlpack_SetParamRAModelPtr", (DL_FUNC) &_mlpack_SetParamRAModelPtr, 3},
    {"_mlpack_SerializeRAModelPtr", (DL_FUNC) &_mlpack_SerializeRAModelPtr, 1},
    {"_mlpack_DeserializeRAModelPtr", (DL_FUNC) &_mlpack_DeserializeRAModelPtr, 1},
    {"_mlpack_lars_call", (DL_FUNC) &_mlpack_lars_call, 2},
    {"_mlpack_GetParamLARSPtr", (DL_FUNC) &_mlpack_GetParamLARSPtr, 3},
    {"_mlpack_SetParamLARSPtr", (DL_FUNC) &_mlpack_SetParamLARSPtr, 3},
    {"_mlpack_SerializeLARSPtr", (DL_FUNC) &_mlpack_SerializeLARSPtr, 1},
    {"_mlpack_DeserializeLARSPtr", (DL_FUNC) &_mlpack_DeserializeLARSPtr, 1},
    {"_mlpack_linear_regression_call", (DL_FUNC) &_mlpack_linear_regression_call, 2},
    {"_mlpack_GetParamLinearRegressionPtr", (DL_FUNC) &_mlpack_GetParamLinearRegressionPtr, 3},
    {"_mlpack_SetParamLinearRegressionPtr", (DL_FUNC) &_mlpack_SetParamLinearRegressionPtr, 3},
    {"_mlpack_SerializeLinearRegressionPtr", (DL_FUNC) &_mlpack_SerializeLinearRegressionPtr, 1},
    {"_mlpack_DeserializeLinearRegressionPtr", (DL_FUNC) &_mlpack_DeserializeLinearRegressionPtr, 1},
    {"_mlpack_linear_svm_call", (DL_FUNC) &_mlpack_linear_svm_call, 2},
    {"_mlpack_GetParamLinearSVMModelPtr", (DL_FUNC) &_mlpack_GetParamLinearSVMModelPtr, 3},
    {"_mlpack_SetParamLinearSVMModelPtr", (DL_FUNC) &_mlpack_SetParamLinearSVMModelPtr, 3},
    {"_mlpack_SerializeLinearSVMModelPtr", (DL_FUNC) &_mlpack_SerializeLinearSVMModelPtr, 1},
    {"_mlpack_DeserializeLinearSVMModelPtr", (DL_FUNC) &_mlpack_DeserializeLinearSVMModelPtr, 1},
    {"_mlpack_lmnn_call", (DL_FUNC) &_mlpack_lmnn_call, 2},
    {"_mlpack_local_coordinate_coding_call", (DL_FUNC) &_mlpack_local_coordinate_coding_call, 2},
    {"_mlpack_GetParamLocalCoordinateCodingPtr", (DL_FUNC) &_mlpack_GetParamLocalCoordinateCodingPtr, 3},
    {"_mlpack_SetParamLocalCoordinateCodingPtr", (DL_FUNC) &_mlpack_SetParamLocalCoordinateCodingPtr, 3},
    {"_mlpack_SerializeLocalCoordinateCodingPtr", (DL_FUNC) &_mlpack_SerializeLocalCoordinateCodingPtr, 1},
    {"_mlpack_DeserializeLocalCoordinateCodingPtr", (DL_FUNC) &_mlpack_DeserializeLocalCoordinateCodingPtr, 1},
    {"_mlpack_logistic_regression_call", (DL_FUNC) &_mlpack_logistic_regression_call, 2},
    {"_mlpack_GetParamLogisticRegressionPtr", (DL_FUNC) &_mlpack_GetParamLogisticRegressionPtr, 3},
    {"_mlpack_SetParamLogisticRegressionPtr", (DL_FUNC) &_mlpack_SetParamLogisticRegressionPtr, 3},
    {"_mlpack_SerializeLogisticRegressionPtr", (DL_FUNC) &_mlpack_SerializeLogisticRegressionPtr, 1},
    {"_mlpack_DeserializeLogisticRegressionPtr", (DL_FUNC) &_mlpack_DeserializeLogisticRegressionPtr, 1},
    {"_mlpack_lsh_call", (DL_FUNC) &_mlpack_lsh_call, 2},
    {"_mlpack_GetParamLSHSearchPtr", (DL_FUNC) &_mlpack_GetParamLSHSearchPtr, 3},
    {"_mlpack_SetParamLSHSearchPtr", (DL_FUNC) &_mlpack_SetParamLSHSearchPtr, 3},
    {"_mlpack_SerializeLSHSearchPtr", (DL_FUNC) &_mlpack_SerializeLSHSearchPtr, 1},
    {"_mlpack_DeserializeLSHSearchPtr", (DL_FUNC) &_mlpack_DeserializeLSHSearchPtr, 1},
    {"_mlpack_mean_shift_call", (DL_FUNC) &_mlpack_mean_shift_call, 2},
    {"_mlpack_nbc_call", (DL_FUNC) &_mlpack_nbc_call, 2},
    {"_mlpack_GetParamNBCModelPtr", (DL_FUNC) &_mlpack_GetParamNBCModelPtr, 3},
    {"_mlpack_SetParamNBCModelPtr", (DL_FUNC) &_mlpack_SetParamNBCModelPtr, 3},
    {"_mlpack_SerializeNBCModelPtr", (DL_FUNC) &_mlpack_SerializeNBCModelPtr, 1},
    {"_mlpack_DeserializeNBCModelPtr", (DL_FUNC) &_mlpack_DeserializeNBCModelPtr, 1},
    {"_mlpack_nca_call", (DL_FUNC) &_mlpack_nca_call, 2},
    {"_mlpack_nmf_call", (DL_FUNC) &_mlpack_nmf_call, 2},
    {"_mlpack_pca_call", (DL_FUNC) &_mlpack_pca_call, 2},
    {"_mlpack_perceptron_call", (DL_FUNC) &_mlpack_perceptron_call, 2},
    {"_mlpack_GetParamPerceptronModelPtr", (DL_FUNC) &_mlpack_GetParamPerceptronModelPtr, 3},
    {"_mlpack_SetParamPerceptronModelPtr", (DL_FUNC) &_mlpack_SetParamPerceptronModelPtr, 3},
    {"_mlpack_SerializePerceptronModelPtr", (DL_FUNC) &_mlpack_SerializePerceptronModelPtr, 1},
    {"_mlpack_DeserializePerceptronModelPtr", (DL_FUNC) &_mlpack_DeserializePerceptronModelPtr, 1},
    {"_mlpack_preprocess_binarize_call", (DL_FUNC) &_mlpack_preprocess_binarize_call, 2},
    {"_mlpack_preprocess_describe_call", (DL_FUNC) &_mlpack_preprocess_describe_call, 2},
    {"_mlpack_preprocess_one_hot_encoding_call", (DL_FUNC) &_mlpack_preprocess_one_hot_encoding_call, 2},
    {"_mlpack_preprocess_scale_call", (DL_FUNC) &_mlpack_preprocess_scale_call, 2},
    {"_mlpack_GetParamScalingModelPtr", (DL_FUNC) &_mlpack_GetParamScalingModelPtr, 3},
    {"_mlpack_SetParamScalingModelPtr", (DL_FUNC) &_mlpack_SetParamScalingModelPtr, 3},
    {"_mlpack_SerializeScalingModelPtr", (DL_FUNC) &_mlpack_SerializeScalingModelPtr, 1},
    {"_mlpack_DeserializeScalingModelPtr", (DL_FUNC) &_mlpack_DeserializeScalingModelPtr, 1},
    {"_mlpack_preprocess_split_call", (DL_FUNC) &_mlpack_preprocess_split_call, 2},
    {"_mlpack_CreateParams", (DL_FUNC) &_mlpack_CreateParams, 1},
    {"_mlpack_CreateTimers", (DL_FUNC) &_mlpack_CreateTimers, 0},
    {"_mlpack_SetParamInt", (DL_FUNC) &_mlpack_SetParamInt, 3},
    {"_mlpack_SetParamDouble", (DL_FUNC) &_mlpack_SetParamDouble, 3},
    {"_mlpack_SetParamString", (DL_FUNC) &_mlpack_SetParamString, 3},
    {"_mlpack_SetParamBool", (DL_FUNC) &_mlpack_SetParamBool, 3},
    {"_mlpack_SetParamVecString", (DL_FUNC) &_mlpack_SetParamVecString, 3},
    {"_mlpack_SetParamVecInt", (DL_FUNC) &_mlpack_SetParamVecInt, 3},
    {"_mlpack_SetParamMat", (DL_FUNC) &_mlpack_SetParamMat, 4},
    {"_mlpack_SetParamUMat", (DL_FUNC) &_mlpack_SetParamUMat, 3},
    {"_mlpack_SetParamRow", (DL_FUNC) &_mlpack_SetParamRow, 3},
    {"_mlpack_SetParamURow", (DL_FUNC) &_mlpack_SetParamURow, 3},
    {"_mlpack_SetParamCol", (DL_FUNC) &_mlpack_SetParamCol, 3},
    {"_mlpack_SetParamUCol", (DL_FUNC) &_mlpack_SetParamUCol, 3},
    {"_mlpack_SetParamMatWithInfo", (DL_FUNC) &_mlpack_SetParamMatWithInfo, 4},
    {"_mlpack_GetParamInt", (DL_FUNC) &_mlpack_GetParamInt, 2},
    {"_mlpack_GetParamDouble", (DL_FUNC) &_mlpack_GetParamDouble, 2},
    {"_mlpack_GetParamString", (DL_FUNC) &_mlpack_GetParamString, 2},
    {"_mlpack_GetParamBool", (DL_FUNC) &_mlpack_GetParamBool, 2},
    {"_mlpack_GetParamVecString", (DL_FUNC) &_mlpack_GetParamVecString, 2},
    {"_mlpack_GetParamVecInt", (DL_FUNC) &_mlpack_GetParamVecInt, 2},
    {"_mlpack_GetParamMat", (DL_FUNC) &_mlpack_GetParamMat, 2},
    {"_mlpack_GetParamUMat", (DL_FUNC) &_mlpack_GetParamUMat, 2},
    {"_mlpack_GetParamRow", (DL_FUNC) &_mlpack_GetParamRow, 2},
    {"_mlpack_GetParamURow", (DL_FUNC) &_mlpack_GetParamURow, 2},
    {"_mlpack_GetParamCol", (DL_FUNC) &_mlpack_GetParamCol, 2},
    {"_mlpack_GetParamUCol", (DL_FUNC) &_mlpack_GetParamUCol, 2},
    {"_mlpack_IO_GetParamMatWithInfo", (DL_FUNC) &_mlpack_IO_GetParamMatWithInfo, 2},
    {"_mlpack_ResetTimers", (DL_FUNC) &_mlpack_ResetTimers, 0},
    {"_mlpack_SetPassed", (DL_FUNC) &_mlpack_SetPassed, 2},
    {"_mlpack_radical_call", (DL_FUNC) &_mlpack_radical_call, 2},
    {"_mlpack_random_forest_call", (DL_FUNC) &_mlpack_random_forest_call, 2},
    {"_mlpack_GetParamRandomForestModelPtr", (DL_FUNC) &_mlpack_GetParamRandomForestModelPtr, 3},
    {"_mlpack_SetParamRandomForestModelPtr", (DL_FUNC) &_mlpack_SetParamRandomForestModelPtr, 3},
    {"_mlpack_SerializeRandomForestModelPtr", (DL_FUNC) &_mlpack_SerializeRandomForestModelPtr, 1},
    {"_mlpack_DeserializeRandomForestModelPtr", (DL_FUNC) &_mlpack_DeserializeRandomForestModelPtr, 1},
    {"_mlpack_softmax_regression_call", (DL_FUNC) &_mlpack_softmax_regression_call, 2},
    {"_mlpack_GetParamSoftmaxRegressionPtr", (DL_FUNC) &_mlpack_GetParamSoftmaxRegressionPtr, 3},
    {"_mlpack_SetParamSoftmaxRegressionPtr", (DL_FUNC) &_mlpack_SetParamSoftmaxRegressionPtr, 3},
    {"_mlpack_SerializeSoftmaxRegressionPtr", (DL_FUNC) &_mlpack_SerializeSoftmaxRegressionPtr, 1},
    {"_mlpack_DeserializeSoftmaxRegressionPtr", (DL_FUNC) &_mlpack_DeserializeSoftmaxRegressionPtr, 1},
    {"_mlpack_sparse_coding_call", (DL_FUNC) &_mlpack_sparse_coding_call, 2},
    {"_mlpack_GetParamSparseCodingPtr", (DL_FUNC) &_mlpack_GetParamSparseCodingPtr, 3},
    {"_mlpack_SetParamSparseCodingPtr", (DL_FUNC) &_mlpack_SetParamSparseCodingPtr, 3},
    {"_mlpack_SerializeSparseCodingPtr", (DL_FUNC) &_mlpack_SerializeSparseCodingPtr, 1},
    {"_mlpack_DeserializeSparseCodingPtr", (DL_FUNC) &_mlpack_DeserializeSparseCodingPtr, 1},
    {"_mlpack_test_r_binding_call", (DL_FUNC) &_mlpack_test_r_binding_call, 2},
    {"_mlpack_GetParamGaussianKernelPtr", (DL_FUNC) &_mlpack_GetParamGaussianKernelPtr, 3},
    {"_mlpack_SetParamGaussianKernelPtr", (DL_FUNC) &_mlpack_SetParamGaussianKernelPtr, 3},
    {"_mlpack_SerializeGaussianKernelPtr", (DL_FUNC) &_mlpack_SerializeGaussianKernelPtr, 1},
    {"_mlpack_DeserializeGaussianKernelPtr", (DL_FUNC) &_mlpack_DeserializeGaussianKernelPtr, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlpack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
